import csv
import numpy as np
import matplotlib.pyplot as plt



def main():
    t = [] # column 0
    data = [] # column 1
    dataSet = 'sigD.csv'
    with open(dataSet) as f:
        # open the csv file
        reader = csv.reader(f)
        for row in reader:
            # read the rows 1 one by one
            t.append(float(row[0])) # leftmost column
            data.append(float(row[1])) # second column



    #filter data with FIR
    #band pass filter
    h = [
    0.000000000000000010,
    -0.000000000000000008,
    0.000000000000424388,
    0.000000000003481035,
    0.000000000015020861,
    0.000000000046171815,
    0.000000000114329748,
    0.000000000243086316,
    0.000000000460707842,
    0.000000000796847961,
    0.000000001277285988,
    0.000000001916626889,
    0.000000002709079037,
    0.000000003617631814,
    0.000000004562182896,
    0.000000005407398959,
    0.000000005951323676,
    0.000000005915952585,
    0.000000004941161907,
    0.000000002583484203,
    -0.000000001678746504,
    -0.000000008432425951,
    -0.000000018307610053,
    -0.000000031945367346,
    -0.000000049954999988,
    -0.000000072860629600,
    -0.000000101037804801,
    -0.000000134641545064,
    -0.000000173528056991,
    -0.000000217173213662,
    -0.000000264591725388,
    -0.000000314261705273,
    -0.000000364059985877,
    -0.000000411214021954,
    -0.000000452276458156,
    -0.000000483128403851,
    -0.000000499017091552,
    -0.000000494632874280,
    -0.000000464229418416,
    -0.000000401789476543,
    -0.000000301236794049,
    -0.000000156692558143,
    0.000000037227606127,
    0.000000285082666666,
    0.000000590250474770,
    0.000000954559169716,
    0.000001377920016839,
    0.000001857978171194,
    0.000002389799612823,
    0.000002965613704296,
    0.000003574631366063,
    0.000004202958649588,
    0.000004833624441705,
    0.000005446739106154,
    0.000006019798049783,
    0.000006528140507428,
    0.000006945569331158,
    0.000007245132333351,
    0.000007400059898082,
    0.000007384847292695,
    0.000007176463565894,
    0.000006755662305845,
    0.000006108363069080,
    0.000005227066191933,
    0.000004112258180044,
    0.000002773760138798,
    0.000001231967948684,
    -0.000000481069736859,
    -0.000002320790952034,
    -0.000004229532616331,
    -0.000006136269320540,
    -0.000007956729683548,
    -0.000009593936966258,
    -0.000010939214964663,
    -0.000011873693257484,
    -0.000012270337778325,
    -0.000011996523559194,
    -0.000010917156520910,
    -0.000008281570208335,
    -0.000003261939881082,
    0.000004189811543576,
    0.000013835955347067,
    0.000025148525813414,
    0.000037324693278276,
    0.000049322894252183,
    0.000059919834419654,
    0.000067787464846508,
    0.000071587843641332,
    0.000070082463458887,
    0.000062251204062612,
    0.000047414638947815,
    0.000025352089279053,
    -0.000003593301440681,
    -0.000038431971048509,
    -0.000077477613660231,
    -0.000118338614359653,
    -0.000157959733862078,
    -0.000192720781656041,
    -0.000218596497936958,
    -0.000231378621818629,
    -0.000226957257461668,
    -0.000201654323236383,
    -0.000152597301272315,
    -0.000078116963954851,
    0.000021851455803778,
    0.000145387739334821,
    0.000288253470594433,
    0.000443634112213391,
    0.000601984122434928,
    0.000751000935237464,
    0.000875749888998189,
    0.000958956653454823,
    0.000981476491186164,
    0.000922941035952024,
    0.000762573526707509,
    0.000480153055367609,
    0.000057097903788485,
    -0.000522371946350483,
    -0.001270041929186515,
    -0.002192535596855777,
    -0.003290233748788138,
    -0.004556342945026289,
    -0.005976175351515751,
    -0.007526697516882546,
    -0.009176397949144910,
    -0.010885512389241382,
    -0.012606631797960705,
    -0.014285701798658982,
    -0.015863404330306637,
    -0.017276893381481785,
    -0.018461837813099041,
    -0.019354706407549570,
    -0.019895214379800467,
    -0.020028837577621073,
    -0.019709291306532394,
    -0.018900865811239238,
    -0.017580510404567828,
    -0.015739563303106763,
    -0.013385034399152462,
    -0.010540363202431137,
    -0.007245593495772154,
    -0.003556929100590577,
    0.000454339432232594,
    0.004703520538281691,
    0.009094776053593878,
    0.013523874678401233,
    0.017881351274876570,
    0.022055958772923892,
    0.025938284041242744,
    0.029424389088667718,
    0.032419334972305876,
    0.034840448098116525,
    0.036620197194909679,
    0.037708563805002912,
    0.038074809048825820,
    0.037708563805002586,
    0.036620197194909776,
    0.034840448098116851,
    0.032419334972305903,
    0.029424389088667458,
    0.025938284041242682,
    0.022055958772924142,
    0.017881351274876594,
    0.013523874678401073,
    0.009094776053593948,
    0.004703520538281841,
    0.000454339432232623,
    -0.003556929100590642,
    -0.007245593495772163,
    -0.010540363202431097,
    -0.013385034399152437,
    -0.015739563303106739,
    -0.017580510404567821,
    -0.018900865811239252,
    -0.019709291306532362,
    -0.020028837577621000,
    -0.019895214379800429,
    -0.019354706407549601,
    -0.018461837813099014,
    -0.017276893381481709,
    -0.015863404330306637,
    -0.014285701798658970,
    -0.012606631797960658,
    -0.010885512389241316,
    -0.009176397949144877,
    -0.007526697516882540,
    -0.005976175351515728,
    -0.004556342945026265,
    -0.003290233748788131,
    -0.002192535596855771,
    -0.001270041929186511,
    -0.000522371946350488,
    0.000057097903788478,
    0.000480153055367616,
    0.000762573526707509,
    0.000922941035952013,
    0.000981476491186163,
    0.000958956653454825,
    0.000875749888998187,
    0.000751000935237458,
    0.000601984122434929,
    0.000443634112213392,
    0.000288253470594436,
    0.000145387739334828,
    0.000021851455803776,
    -0.000078116963954855,
    -0.000152597301272312,
    -0.000201654323236372,
    -0.000226957257461662,
    -0.000231378621818631,
    -0.000218596497936952,
    -0.000192720781656027,
    -0.000157959733862078,
    -0.000118338614359657,
    -0.000077477613660228,
    -0.000038431971048500,
    -0.000003593301440678,
    0.000025352089279045,
    0.000047414638947817,
    0.000062251204062620,
    0.000070082463458882,
    0.000071587843641322,
    0.000067787464846506,
    0.000059919834419659,
    0.000049322894252181,
    0.000037324693278268,
    0.000025148525813414,
    0.000013835955347072,
    0.000004189811543573,
    -0.000003261939881090,
    -0.000008281570208335,
    -0.000010917156520903,
    -0.000011996523559191,
    -0.000012270337778331,
    -0.000011873693257484,
    -0.000010939214964654,
    -0.000009593936966259,
    -0.000007956729683553,
    -0.000006136269320538,
    -0.000004229532616322,
    -0.000002320790952029,
    -0.000000481069736862,
    0.000001231967948688,
    0.000002773760138808,
    0.000004112258180045,
    0.000005227066191929,
    0.000006108363069086,
    0.000006755662305855,
    0.000007176463565900,
    0.000007384847292695,
    0.000007400059898091,
    0.000007245132333364,
    0.000006945569331163,
    0.000006528140507427,
    0.000006019798049792,
    0.000005446739106170,
    0.000004833624441709,
    0.000004202958649585,
    0.000003574631366067,
    0.000002965613704304,
    0.000002389799612822,
    0.000001857978171187,
    0.000001377920016842,
    0.000000954559169723,
    0.000000590250474772,
    0.000000285082666662,
    0.000000037227606129,
    -0.000000156692558136,
    -0.000000301236794050,
    -0.000000401789476551,
    -0.000000464229418414,
    -0.000000494632874274,
    -0.000000499017091553,
    -0.000000483128403857,
    -0.000000452276458155,
    -0.000000411214021950,
    -0.000000364059985881,
    -0.000000314261705283,
    -0.000000264591725394,
    -0.000000217173213664,
    -0.000000173528056993,
    -0.000000134641545076,
    -0.000000101037804805,
    -0.000000072860629597,
    -0.000000049954999995,
    -0.000000031945367357,
    -0.000000018307610058,
    -0.000000008432425951,
    -0.000000001678746508,
    0.000000002583484193,
    0.000000004941161907,
    0.000000005915952585,
    0.000000005951323673,
    0.000000005407398956,
    0.000000004562182897,
    0.000000003617631820,
    0.000000002709079039,
    0.000000001916626885,
    0.000000001277285993,
    0.000000000796847969,
    0.000000000460707844,
    0.000000000243086318,
    0.000000000114329755,
    0.000000000046171826,
    0.000000000015020868,
    0.000000000003481035,
    0.000000000000424393,
    0.000000000000000003,
    0.000000000000000011,
]

    #remove 3/4 of the data for better high pass filter
    newData = []
    newt = []
    for i in range(0,len(data), 4):
        newData.append(data[i])
        newt.append(t[i])
    data = newData
    t = newt

    mafData = FIR(data, h)
   # mafData = FIR(mafData, h2)

    

    mafY, mafFrq = fft(t, mafData) # the data to make the fft from
    Y, frq = fft(t, data) # the data to make the fft from

 
    #plot the data and fft
    fig, (ax1, ax2) = plt.subplots(2, 1)
    ax1.plot(t,data,'black')
    ax1.plot(t,mafData,'r')
    ax1.set_xlabel('Time')
    ax1.set_ylabel('Amplitude')
    ax1.set_title(f'{dataSet}, band pass filter 1-3 hz')
    ax2.loglog(frq,abs(Y),'black') # plotting the unfiltered fft
    ax2.loglog(mafFrq,abs(mafY),'r') # plotting the filtered fft
    ax2.set_xlabel('Freq (Hz)')
    ax2.set_ylabel('|Y(freq)|')
    plt.show()




def fft(t, data):
    y = data # the data to make the fft from
    n = len(y) # length of the signal
    Fs = n/t[-1] # sample rate
    print(Fs)
    Ts = 1.0/Fs; # sampling interval
    ts = np.arange(0,t[-1],Ts) # time vector 
    k = np.arange(n)
    T = n/Fs
    frq = k/T # two sides frequency range
    frq = frq[range(int(n/2))] # one side frequency range
    Y = np.fft.fft(y)/n # fft computing and normalization
    Y = Y[range(int(n/2))]
    return Y, frq

# moving average filter
def FIR(data, h):
    filteredData = []
    #loop through data

    for i in range(len(data)):
        #loop through filter
        sum = 0
        for j in range(len(h)):
            if i-j >= 0:
                sum += h[j]*data[i-j]
        filteredData.append(sum)

    return filteredData


if __name__ == "__main__":
    main()